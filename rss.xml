<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/" xmlns:atom="http://www.w3.org/2005/Atom"  xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Articles | RavelloH’s Blog</title>
		<description>A Blog by RavelloH</description>
		<pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate>
		<link>https://ravelloh.github.io/articles/index.html</link>
		<atom:link href="http://fetchrss.com/rss/62e7476cbc64503f4d1c8c3262e748042496e12e1401c6e3.xml" rel="self" type="application/rss+xml" />
		<generator>https://fetchrss.com</generator>
		<image>
			<link>https://ravelloh.github.io/articles/index.html</link>
			<url>https://www.google.com/s2/favicons?domain=https://ravelloh.github.io</url>
			<title>Articles | RavelloH’s Blog</title>
		</image>

		<item>
			<title>HikvisionIP摄像头后台绕过</title>
			<link>https://ravelloh.github.io/articles/20221224/</link>
			<description>最近在学校用Kali扫内网ms17-010的时候，发现扫了一大堆主机居然只扫出来两个，而且在攻击时发现的确没用。诚然，永恒之蓝作为2017年的漏洞，早已在当时被紧急修复，五年过去依旧存在这个漏洞的Windows7设备已经寥寥无几了。但是在用nmap扫描时，我发现学校内有Hikvision IP camera设备，大概都是2016年装上的，于是回家一查，果然存在一个后台绕过漏洞。但是不巧的是，因为疫情封校还没法回去实践，于是在这里应用一下，看看公网上还有多少设备存在这漏洞。</description>
			<pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20221224/</guid>
		</item>
		<item>
			<title>Virgule.js现已发布</title>
			<link>https://ravelloh.github.io/articles/20221126/</link>
			<description>22年暑假时，我把博客首页的打字机特效换成了类似于现在这种，但是当时也是随便做出来玩玩的，不仅功能单一，结构臃肿，用了530行js也只能达到让主页有两句循环的轮播，实在太不优雅。今年十月初我决定重制这个功能将其从530行压缩到370行，并在原有的基础上加入了跳过空格、自定义速度、快捷引用目标等功能，并将其封装为函数，现在想要使用只需一句：virgule(target,context,speed)太优雅了。项目现已开源。@Github:RavelloH/virgule.js</description>
			<pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20221126/</guid>
		</item>
		<item>
			<title>静态站实现全站搜索</title>
			<link>https://ravelloh.github.io/articles/20220825/</link>
			<description>全站搜索这一功能我想加入到我的博客中不是一年两年的事了。但因自己现在弃用Hexo转而自己做博客，这两年搜索这个功能就一直未能实现。最近自己偶然有新想法，就给实现了。效果还不错，现在搭配Github Actions使用，可以实现新文章自动索引，实现了自动化。</description>
			<pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20220825/</guid>
		</item>
		<item>
			<title>论静态页中伪动态的实现</title>
			<link>https://ravelloh.github.io/articles/20220708/</link>
			<description>最近半年里，我先后完成了PSGameSpider与EverydayNews这两个项目，它们都是基于GithubPages的静态页，但其中都多多少少可以实现动态站的部分功能，如识别网址后的？xxx=xxx并作出反馈（EverydayNews），或者动态根据Github中的仓库内容渲染页面（PSGameSpider）。不过，这实质上也并没有改变这作为静态站的本质，因为这不符合动态站“个性化为不同用户展示页面”的特点。实际上，“伪动态”这个名词是类比“伪静态”而产生的，但不同于伪静态中可以用服务器正则判断并生成网页，静态站中想要实现部分动态站的效果就只能靠在用户的设备上执行脚本，并使用已有的静态资源做出反馈。下面是其中一部分功能的实现效果及方法:</description>
			<pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20220708/</guid>
		</item>
		<item>
			<title>Python实现网络爬虫</title>
			<link>https://ravelloh.github.io/articles/20220323/</link>
			<description>最近在参与一个数据收集的项目，需要大量获取图像及链接等，用人力显然是完成不过来了，于是索性就做个爬虫，一劳永逸了。这里因为项目比较小，对效率要求不大，就选择了使用Python而不是C语言。(也因为Python用起来更省事)本文所含代码可直接跳转#代码查看</description>
			<pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20220323/</guid>
		</item>
		<item>
			<title>JS递归遍历伪数组</title>
			<link>https://ravelloh.github.io/articles/20220206/</link>
			<description>最近在用getElementsByTagName获取标签内容时，发现与getElementById/ClassName等不同，直接document.getElementsByTagName('').id修改页面中所有标签的id时没有反应...console.log输出一下，发现输出的是[li,li,li,li,li]这种形式的伪数组(集合)</description>
			<pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20220206/</guid>
		</item>
		<item>
			<title>Minecraft命令实现在线统计</title>
			<link>https://ravelloh.github.io/articles/20210719/</link>
			<description>首先要实现在线时间统计，需要先定义时间。所以在这里 需要先创建几个稍后要用到的计分板：/scoreboard objectives add timetick dummy/scoreboard objectives add times dummy/scoreboard objectives add timem dummy/scoreboard objectives add timeh dummy/scoreboard objectives add timed dummy顺次显示的是 秒-分-时-天。计时器的思路是这样的：使用循环命令方块为timetick加分，则每秒可以增加20（每秒命令方块运行20次）当timetick为20时，为times加1并设置timetick为0。当times为60时，为timem加1并设置times为0。当timem为60时，为timeh加1并设置timem为0。...以此类推。所以在这里 需要使用命令方块组+目标选择器进行运算:循环: scoreboard players add @a timetick 1连锁: scoreboard players add @a[scores={timetick=20..}] times 1连锁: scoreboard players set @a[scores={timetick=20..}] timetick 0连锁: scoreboard players add @a[scores={times=60..}] timem 1连锁: scoreboard players set @a[scores={times=60..}] times 0连锁: scoreboard players add @a[scores={timem=60..}] timeh 1连锁: scoreboard players set @a[scores={timem=60..}] timem 0连锁: scoreboard players add @a[scores={timeh=24..}] timed 1连锁: scoreboard players set @a[scores={timeh=24..}] timeh 0最后 再加一个title用于显示即可循环： execute as @a at @s run title @p actionbar
                    [{"text":"在线时间:","color":"green","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false},{"score":{"objective":"timed","name":"@p"},"color":"gray","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false},{"text":"天","color":"gold","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false},{"score":{"objective":"timeh","name":"@p"},"color":"gray","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false},{"text":"小时","color":"gold","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false},{"score":{"objective":"timem","name":"@p"},"color":"gray","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false},{"text":"分","color":"gold","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false},{"score":{"objective":"times","name":"@p"},"color":"gray","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false},{"text":"秒","color":"gold","bold":false,"italic":false,"underlined":false,"strikethrough":false,"obfuscated":false}]（考虑到多人游戏的情况 这里添加了一个execute用于保证显示正确的对象）当我们搭建好全部命令方块并运行后，不难发现虽然计时器正常，但却没有显示值为0的项目:这是因为未被赋值的计分板项目默认不显示，需要手动设置为0：/scoreboard players set @p times 0/scoreboard players set @p timem 0/scoreboard players set @p timeh 0/scoreboard players set @p timed 0之后即可正常使用。</description>
			<pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20210719/</guid>
		</item>
		<item>
			<title>CSS+JS实现页面切换过渡</title>
			<link>https://ravelloh.github.io/articles/20210705/</link>
			<description>因为自己最近在忙这个博客的建设，所以自己就想给这个blog做一个切换页面时的过渡。可在网上却都没什么符合这blog主题的，于是自己动手丰衣足食，自己就做了现在的这种效果。</description>
			<pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20210705/</guid>
		</item>
		<item>
			<title>新主题上线</title>
			<link>https://ravelloh.github.io/articles/20210701/</link>
			<description>最近做好了这个新主题并应用到博客，
因为之前的那个主题是基于Hexo的，自己现在也不太想用，干脆自己做了个
这个主题虽说比较简陋，但毕竟是自己做出来的，各方面都很了解，比之前那个四零八乱的好多了。
</description>
			<pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20210705/</guid>
		</item>
		<item>
			<title>反转药水效果</title>
			<link>https://ravelloh.github.io/articles/20200816/</link>
			<description>由于一些神奇的BUG特性，高等级效果将会使原效果被反转，而这就使得了一些原版不存在的操作变成了可能。例如，创造模式的玩家不免疫增益效果，只免疫负面效果，而这就使得了如果可以给予创造玩家一种增益效果但实际是负面效果，也是能对创造模式玩家造成伤害的。除此以外，对跳跃提升药水运用相同的原理也有奇效玩家将会无法跳跃</description>
			<pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
			<guid isPermaLink="false">https://ravelloh.github.io/articles/20210705/</guid>
		</item>

	</channel>
</rss>
